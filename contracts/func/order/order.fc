#pragma version =0.4.4;

#include "storage.fc";


;;
;; Contract Order functions
;;

() $global_basicJettonTransfer(slice $jetton_wallet, slice $destination, int $amount) impure inline_ref {
    send_raw_message(begin_cell()
        .store_int(24, 6)
        .store_slice($jetton_wallet)
        .store_coins(40000000)
        .store_int(1, 107)
        .store_ref(begin_cell()
            .store_uint(260734629, 32)
            .store_uint(0, 64)
            .store_coins($amount)
            .store_slice($destination)
            .store_slice($destination)
            .store_int(0, 6)
            .end_cell())
        .end_cell(),
        2);
}

() $Order$_fun_withdraw(slice seller) impure inline_ref {
    send_raw_message(begin_cell()
        .store_int(24, 6)
        .store_slice(seller)
        .store_int(0, 111)
        .end_cell(), 160);
}

;;
;; Get methods of a Contract Order
;;

_ %state() method_id (77589) {
    return $Order$_contract_load(my_address());
}

;;
;; Routing of a Contract Order
;;

() recv_internal(cell in_msg_cell, slice in_msg) impure {

    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_bounced = -(cs~load_uint(4) & 1);
    slice msg_sender_addr = cs~load_msg_addr();

    ;; Handle bounced messages
    if (~ msg_bounced) {
        ;; Parse incoming message
        int op = 0;
        (slice seller, slice router, (slice order_jetton_sell_wallet, slice order_jetton_buy_wallet, slice jetton_sell_master, slice jetton_buy_master, int amount_sell, int amount_buy, int timeout), int open, int filled) = $Order$_contract_load(msg_sender_addr);

        if (slice_bits(in_msg) >= 32) {
            op = in_msg~load_uint(32);
        }

        ;; Receive Request message
        if (op == 1960153514) {
            var msg = in_msg~$Request$_load();
            throw_unless(132, (equal_slice_bits(router, msg_sender_addr)));
            throw_unless(43, (~ filled));
            filled = true;
            (order_jetton_sell_wallet, order_jetton_buy_wallet, jetton_sell_master, jetton_buy_master, amount_sell, amount_buy, timeout) = msg;
        }

        ;; Receive JettonTransferNotification message
        elseif (op == 1935855772) {
            in_msg~skip_bits(64);
            var amount = in_msg~load_coins();
            var sender = in_msg~load_msg_addr();
            throw_unless(44, filled);
            if ((equal_slice_bits(order_jetton_sell_wallet, msg_sender_addr))) {
                throw_unless(41, (~ open));
                throw_unless(132, (equal_slice_bits(router, sender)));
                throw_unless(39, (amount == amount_sell));
                open = true;
            } elseif ((equal_slice_bits(order_jetton_buy_wallet, msg_sender_addr))) {
                throw_unless(40, open);
                throw_unless(42, (timeout > now()));
                throw_unless(39, (amount == amount_buy));
                $global_basicJettonTransfer(order_jetton_buy_wallet, seller, amount_buy);
                $global_basicJettonTransfer(order_jetton_sell_wallet, sender, amount_sell);
                $Order$_fun_withdraw(seller);
            } else {
                throw(136);
            }
        }

        ;; Receive Cancel message
        elseif (op == 1906957434) {
            throw_unless(133, open);
            throw_unless(132, (equal_slice_bits(seller, msg_sender_addr)));
            $global_basicJettonTransfer(order_jetton_sell_wallet, seller, amount_sell);
            $Order$_fun_withdraw(seller);
        }

        else {
            throw(130);
        }

        set_data(begin_cell()
            .store_int(true, 1)
            .store_slice(seller)
            .store_slice(router)
            .store_ref(begin_cell()
                .store_uint(1960153514, 32)
                .store_slice(order_jetton_sell_wallet)
                .store_slice(order_jetton_buy_wallet)
                .store_slice(jetton_sell_master)
                .store_ref(begin_cell()
                    .store_slice(jetton_buy_master)
                    .store_coins(amount_sell)
                    .store_coins(amount_buy)
                    .store_uint(timeout, 64)
                    .end_cell()
                )
                .store_int(open, 1)
                .store_int(filled, 1)
                .end_cell()
            )
            .end_cell());
    }
}
