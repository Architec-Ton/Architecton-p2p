;;
;; Type: Context
;; TLB: _ bounced:bool sender:address value:int257 raw:^slice = Context
;;

_ $Context$_get_sender((int, slice, int, slice) v) inline {
    var (v'bounced, v'sender, v'value, v'raw) = v;
    return v'sender;
}

_ $Context$_get_value((int, slice, int, slice) v) inline {
    var (v'bounced, v'sender, v'value, v'raw) = v;
    return v'value;
}

;;
;; Type: SendParameters
;; TLB: _ bounce:bool to:address value:int257 mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell = SendParameters
;;

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_bounce_mode_body(slice $to, int $value, int $bounce, int $mode, cell $body) inline {
    return ($bounce, $to, $value, $mode, $body, null(), null());
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode(slice $to, int $value, int $mode) inline {
    return (true, $to, $value, $mode, null(), null(), null());
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_body_code_data(slice $to, int $value, int $mode, cell $body, cell $code, cell $data) inline {
    return (true, $to, $value, $mode, $body, $code, $data);
}

;;
;; Type: NewOwner
;; Header: 0x1d0e4622
;; TLB: new_owner#1d0e4622 new_owner:address = NewOwner
;;

(slice, ((slice))) $NewOwner$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 487474722);
    var v'new_owner = sc_0~__tact_load_address();
    return (sc_0, (v'new_owner));
}

;;
;; Type: NewFee
;; Header: 0x98a2322f
;; TLB: new_fee#98a2322f new_fee:int257 = NewFee
;;

(slice, ((int))) $NewFee$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2560766511);
    var v'new_fee = sc_0~load_int(257);
    return (sc_0, (v'new_fee));
}

;;
;; Type: JettonTransferNotification
;; Header: 0x7362d09c
;; TLB: jetton_transfer_notification#7362d09c query_id:uint64 amount:coins sender:address forward_payload:remainder<slice> = JettonTransferNotification
;;

(slice, ((int, int, slice, slice))) $JettonTransferNotification$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 1935855772);
    var v'query_id = sc_0~load_uint(64);
    var v'amount = sc_0~load_coins();
    var v'sender = sc_0~__tact_load_address();
    var v'forward_payload = sc_0;
    return (sc_0, (v'query_id, v'amount, v'sender, v'forward_payload));
}

;;
;; Type: JettonTransfer
;; Header: 0x0f8a7ea5
;; TLB: jetton_transfer#0f8a7ea5 query_id:uint64 amount:coins destination:address response_destination:address custom_payload:Maybe ^cell forward_ton_amount:coins forward_payload:Maybe ^slice = JettonTransfer
;;

builder $JettonTransfer$_store(builder build_0, (int, int, slice, slice, cell, int, slice) v) inline_ref {
    var (v'query_id, v'amount, v'destination, v'response_destination, v'custom_payload, v'forward_ton_amount, v'forward_payload) = v;
    build_0 = store_uint(build_0, 260734629, 32);
    build_0 = build_0.store_uint(v'query_id, 64);
    build_0 = build_0.store_coins(v'amount);
    build_0 = __tact_store_address(build_0, v'destination);
    build_0 = __tact_store_address(build_0, v'response_destination);
    build_0 = ~ null?(v'custom_payload) ? build_0.store_int(true, 1).store_ref(v'custom_payload) : build_0.store_int(false, 1);
    build_0 = build_0.store_coins(v'forward_ton_amount);
    build_0 = ~ null?(v'forward_payload) ? build_0.store_int(true, 1).store_ref(begin_cell().store_slice(v'forward_payload).end_cell()) : build_0.store_int(false, 1);
    return build_0;
}

cell $JettonTransfer$_store_cell((int, int, slice, slice, cell, int, slice) v) inline {
    return $JettonTransfer$_store(begin_cell(), v).end_cell();
}

((int, int, slice, slice, cell, int, slice)) $JettonTransfer$_constructor_query_id_amount_destination_response_destination_custom_payload_forward_payload_forward_ton_amount(int $query_id, int $amount, slice $destination, slice $response_destination, cell $custom_payload, slice $forward_payload, int $forward_ton_amount) inline {
    return ($query_id, $amount, $destination, $response_destination, $custom_payload, $forward_ton_amount, $forward_payload);
}

;;
;; Type: Order
;;

builder $Order$init$_store(builder build_0, (slice, int) v) inline {
    var (v'seller, v'nonce) = v;
    build_0 = __tact_store_address(build_0, v'seller);
    build_0 = build_0.store_int(v'nonce, 257);
    return build_0;
}

(cell, cell) $Order$_init_child(cell sys', slice $seller, int $nonce) inline_ref {
    slice sc' = sys'.begin_parse();
    cell source = sc'~load_dict();
    cell contracts = new_dict();
    
    ;; Contract Code: Order
    cell mine = __tact_dict_get_code(source, 13869);
    contracts = __tact_dict_set_code(contracts, 13869, mine);
    
    ;; Build cell
    builder b = begin_cell();
    b = b.store_ref(begin_cell().store_dict(contracts).end_cell());
    b = b.store_int(false, 1);
    b = $Order$init$_store(b, ($seller, $nonce));
    return (mine, b.end_cell());
}

;;
;; Type: Router
;;

builder $Router$_store(builder build_0, (slice, int) v) inline {
    var (v'owner, v'fee) = v;
    return build_0;
}

(slice, ((slice, int))) $Router$_load(slice sc_0) inline {
    var v'owner = sc_0~__tact_load_address();
    var v'fee = sc_0~load_int(257);
    return (sc_0, (v'owner, v'fee));
}

(slice, ((slice, int, int))) $Router$init$_load(slice sc_0) inline {
    var v'owner = sc_0~__tact_load_address();
    var v'fee = sc_0~load_int(257);
    var v'time = sc_0~load_int(257);
    return (sc_0, (v'owner, v'fee, v'time));
}

(slice, int) $Router$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$Router$_load();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        (slice $owner, int $fee, int $time) = $sc~$Router$init$_load();
        $sc.end_parse();
        return $Router$_contract_init($owner, $fee, $time);
    }
}

() $Router$_contract_store((slice, int) v) impure inline {


}