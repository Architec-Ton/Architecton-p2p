import {Blockchain} from '@ton/sandbox';
import {Address, Cell, toNano} from '@ton/core';
import '@ton/test-utils';
import {Wallet} from "../wrappers/jetton-wallet";
import {Minter} from "../wrappers/jetton-minter";
import { Order, Request } from '../build/Order/tact_Order';

describe('checkWallets', () => {
    let blockchain: Blockchain;

    beforeEach(async () => {
        blockchain = await Blockchain.create();
    }, 100000000);

    it('check usdt', async () => {
        const usdtWalletCode = Cell.fromBoc(Buffer.from('b5ee9c72010101010023000842028f452d7a4dfd74066b682365177259ed05734435be76b5fd4bd5d8af2b7c3d68', "hex"))[0]

        const usdtAdmin = Address.parse('0:6440fe3c69410383963945173c4b11479bf0b9b4d7090e58777bda581c2f9998')
        const usdtMinter = blockchain.openContract(
            Minter.createFromAddress(
                Address.parse('EQCxE6mUtQJKFnGfaROTKOt1lZbDiiX1kCixRv7Nw2Id_sDs')
            )
        );

        const jettonWalletAdmin = blockchain.openContract(
            Wallet.createFromConfig(
                { owner_address: usdtAdmin, jetton_master_address: usdtMinter.address },
                usdtWalletCode
            )
        );

        expect(jettonWalletAdmin.address.toString()).toEqual('EQDs79iIlXqImS9WmbsZJ08p0grbU55J8xkB2R4n2kNgX3XQ')
    }, 100000000);

    it('check bnk', async () => {
        const bnkWalletCode = Cell.fromBoc(Buffer.from('b5ee9c7201022401000903000114ff00f4a413f4bcf2c80b010201620203037ad001d0d3030171b0a301fa400120d74981010bbaf2e08820d70b0a208104ffbaf2d0898309baf2e088545053036f04f86102f862db3c5512db3cf2e0821b0405020120191a02ee018e5b8020d7217021d749c21f953020d70b1fde208210178d4519ba8e1a30d31f018210178d4519baf2e081d33ffa00596c123113a0027fe082107bdd97deba8e19d31f0182107bdd97debaf2e081d33ffa00596c123113a0027fe0307fe07021d749c21f953020d70b1fde2082109e4088a3bae302200607009ec8f84301cc7f01ca0055205afa025820d74981010bbaf2e08820d70b0a208104ffbaf2d0898309baf2e088cf160120d74981010bbaf2e08820d70b0a208104ffbaf2d0898309baf2e088cf16c9ed54013030d31f0182109e4088a3baf2e081d33ffa00596c12db3c7f0804cc82100f8a7ea5ba8f0830db3c6c17db3c7fe0208210595f07bcba8ec230d31f018210595f07bcbaf2e081d33ffa00fa400120d74981010bbaf2e08820d70b0a208104ffbaf2d0898309baf2e08801d2000191d4926d01e255306c14db3c7fe08210178d4519ba090a0b0c0178f8416f248200ca35f8416f2410235f035290c705f2f46df8416f24135f03821005f5e100a1c8c9d0271049513a513b0350eaa10d108a1079106855060d00c6d31f0182100f8a7ea5baf2e081d33ffa00fa400120d74981010bbaf2e08820d70b0a208104ffbaf2d0898309baf2e08801fa400120d74981010bbaf2e08820d70b0a208104ffbaf2d0898309baf2e08801d2000191d4926d01e2fa005166161514433002cef8416f2451d9a181333121c2fff2f440cb5473bc5610547edc547edc2e109a5f0a22816cb702c705f2f45473bc5610547edc547edc2e155f057132c200923072de5414328200914106db3c12a88209312d00a08208989680a0bcf2f44dcb103a478910365e4001140d0160f8416f2451a6a18200ebc221c2fff2f44098547389547da953ba10675f07228200b7c802c705f2f44a981037461650540f02188f07db3c6c16db3c7fe03070101103de323636363610384765f8435112db3c5c7059c87001cb017301cb017001cb0012ccccc9f900c87201cb017001cb0012ca07cbffc9d020d74981010bbaf2e08820d70b0a208104ffbaf2d0898309baf2e088187050877f80405447de1023c85550db3cc910491038401710461045db3c1f0e1700aa8210178d45195007cb1f15cb3f5003fa020120d74981010bbaf2e08820d70b0a208104ffbaf2d0898309baf2e088cf160120d74981010bbaf2e08820d70b0a208104ffbaf2d0898309baf2e088cf1601fa0201cf1601d0306c33337080405413267f06c8553082107bdd97de5005cb1f13cb3f01fa020120d74981010bbaf2e08820d70b0a208104ffbaf2d0898309baf2e088cf160120d74981010bbaf2e08820d70b0a208104ffbaf2d0898309baf2e088cf16c92450441443306d6ddb3c1700b2d31f018210178d4519baf2e081d33ffa00fa400120d74981010bbaf2e08820d70b0a208104ffbaf2d0898309baf2e08801fa400120d74981010bbaf2e08820d70b0a208104ffbaf2d0898309baf2e08801fa005155151443300136f8416f2451c8a08171cd21c2fff2f440ba5473ab547fcb547dcb2d1202de10375f07325320c705b38ed65530f8435112db3c018108f8027059c87001cb017301cb017001cb0012ccccc9f900c87201cb017001cb0012ca07cbffc9d020d74981010bbaf2e08820d70b0a208104ffbaf2d0898309baf2e0885005c70514f2f458915be25473ab547fcb547dcb2d1f130374155f05f8276f1023a1820898968066b608a18208989680a05230a121c2008e875531db3c58a0a1926c51e226c200e300103d4cb0104a5e715e3114151600646c31fa400120d74981010bbaf2e08820d70b0a208104ffbaf2d0898309baf2e08830fa003171d721fa0031fa0030a703ab0001c655205474bc5610547edc547edc323535353521c2008ec6017150547004c8553082107362d09c5005cb1f13cb3f01fa020120d74981010bbaf2e08820d70b0a208104ffbaf2d0898309baf2e088cf1601cf16c92555301443306d6ddb3c925f05e255021701c2345b326c33337020c87201cb017001cb0012ca07cbffc9d020d74981010bbaf2e08820d70b0a208104ffbaf2d0898309baf2e08821c705b39322c2009170e28e9c707203c8018210d53276db58cb1fcb3fc9414013102410236d6ddb3c925f03e21701cac87101ca01500701ca007001ca02500520d74981010bbaf2e08820d70b0a208104ffbaf2d0898309baf2e088cf165003fa027001ca68236eb3917f93246eb3e2973333017001ca00e30d216eb39c7f01ca0001206ef2d08001cc95317001ca00e2c901fb001800987f01ca00c87001ca007001ca00246eb39d7f01ca0004206ef2d0805004cc9634037001ca00e2246eb39d7f01ca0004206ef2d0805004cc9634037001ca00e27001ca00027f01ca0002c958cc0211bfd816d9e6d9e361a41b1c020120202101baed44d0d401f863d200018e45fa00fa400120d74981010bbaf2e08820d70b0a208104ffbaf2d0898309baf2e08801fa400120d74981010bbaf2e08820d70b0a208104ffbaf2d0898309baf2e08843306c13e0f828d70b0a8309baf2e0891d012c547210547543541761f8435112db3c6c3230103645401f018afa400120d74981010bbaf2e08820d70b0a208104ffbaf2d0898309baf2e08801fa400120d74981010bbaf2e08820d70b0a208104ffbaf2d0898309baf2e0881202d101db3c1e0004705900d602d0f404306d01813e2e018010f40f6fa1f2e08701813e2e22028010f417c801c8f400c901cc7001ca0040035920d74981010bbaf2e08820d70b0a208104ffbaf2d0898309baf2e088cf160120d74981010bbaf2e08820d70b0a208104ffbaf2d0898309baf2e088cf16c900b9bbbd182705cec3d5d2cae7b1e84ec39d64a851b6682709dd6352d2b647cb322d3af2dfdf1623982702055c01b80676394ce583aae4725b2c382701bd49def954596f1c753d3de0559c32682709d974e5ab34ecb733a0e966d9466e8a4802014822230011b0afbb5134348000600075b26ee3435697066733a2f2f516d545742583770627037767470597139427255556d696577767a41595834587579476f545231386f4e58464647820', 'hex'))[0]
        const bnkMaster = Address.parse('kQBuFWV6jW_9F69A3qjn5rpqfG4eIMBJs9GFSrZU7d33EmIG')
        const request: Request = {
            $$type: 'Request',
            jetton_sell_code: bnkWalletCode,
            jetton_buy_code: bnkWalletCode,
            amount_sell: 10n,
            amount_buy: 5n,
            jetton_sell_master: bnkMaster,
            jetton_buy_master: bnkMaster,
        }

        const order = blockchain.openContract(await Order.fromInit(bnkMaster, request, BigInt(Math.floor(Date.now() / 1000))));
        const seller = await blockchain.treasury('seller');

        const deployResult = await order.send(
            seller.getSender(),
            {
                value: toNano('0.05'),
            },
            {
                $$type: 'Deploy',
                queryId: 0n,
            }
        );

        expect((await order.getCalculateJettonWalletAddress(Address.parse('kQD7ogJrEsxzlr-wGmkWPUay-6ba_Efial7fQ0JqXsZBnhEc'), bnkMaster, bnkWalletCode)).toString())
            .toEqual(Address.parse('kQCgH6DlIgh8Y7fno5CoiBF9DSWVlIpCYeF5K3NBAoARDy4y').toString())
    })
});
